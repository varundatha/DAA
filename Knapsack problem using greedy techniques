#include <stdio.h>

#define MAX_ITEMS 100

// Structure to represent items
struct Item {
    int value;
    int weight;
};

// Function to compare items based on their value-to-weight ratio
int compare(const void *a, const void *b) {
    double ratio_a = ((struct Item *)a)->value / (double)((struct Item *)a)->weight;
    double ratio_b = ((struct Item *)b)->value / (double)((struct Item *)b)->weight;
    return ratio_b - ratio_a; // Sort in non-increasing order of value-to-weight ratio
}

// Function to solve the knapsack problem using a greedy approach
double knapsackGreedy(int W, struct Item items[], int n) {
    // Sort items based on their value-to-weight ratio
    qsort(items, n, sizeof(struct Item), compare);

    int currentWeight = 0; // Current weight in knapsack
    double finalValue = 0.0; // Final value of items in knapsack

    // Iterate through all items
    for (int i = 0; i < n; i++) {
        // If adding the current item doesn't exceed the capacity, add it to the knapsack
        if (currentWeight + items[i].weight <= W) {
            currentWeight += items[i].weight;
            finalValue += items[i].value;
        } else {
            // If adding the current item exceeds the capacity, add a fractional part of it
            int remainingWeight = W - currentWeight;
            finalValue += items[i].value * ((double)remainingWeight / items[i].weight);
            break; // Break the loop as knapsack capacity is reached
        }
    }

    return finalValue;
}

int main() {
    int W; // Capacity of knapsack
    int n; // Number of items
    struct Item items[MAX_ITEMS]; // Array to store items

    // Input capacity of knapsack and number of items
    printf("Enter the capacity of knapsack: ");
    scanf("%d", &W);
    printf("Enter the number of items: ");
    scanf("%d", &n);

    // Input values and weights of items
    printf("Enter the values and weights of items:\n");
    for (int i = 0; i < n; i++) {
        printf("Item %d: ", i + 1);
        scanf("%d %d", &items[i].value, &items[i].weight);
    }

    // Solve knapsack problem using greedy approach and print the result
    double maxValue = knapsackGreedy(W, items, n);
    printf("The maximum value that can be put into the knapsack is: %.2lf\n", maxValue);

    return 0;
}
