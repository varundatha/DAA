#include <stdio.h>
#include <limits.h>

#define N 4

int minCost; // To store the minimum cost

// Function to find the minimum cost using Branch and Bound
void assignmentProblem(int costMatrix[N][N], int assigned[N], int visitedRow[N], int visitedCol[N], int depth, int currentCost) {
    // Base case: if all the jobs are assigned, update the minimum cost
    if (depth == N) {
        if (currentCost < minCost)
            minCost = currentCost;
        return;
    }

    // Iterate over each worker (row)
    for (int i = 0; i < N; i++) {
        // If worker is not assigned yet
        if (!visitedRow[i]) {
            // Mark the worker as visited
            visitedRow[i] = 1;

            // Iterate over each job (column)
            for (int j = 0; j < N; j++) {
                // If job is not assigned yet
                if (!visitedCol[j]) {
                    // Mark the job as visited
                    visitedCol[j] = 1;

                    // Update the current cost
                    int newCost = currentCost + costMatrix[i][j];

                    // If the new cost is less than the minimum cost, explore further
                    if (newCost < minCost) {
                        assigned[depth] = j; // Assign the job to the worker
                        assignmentProblem(costMatrix, assigned, visitedRow, visitedCol, depth + 1, newCost);
                    }

                    // Unmark the job as visited (backtrack)
                    visitedCol[j] = 0;
                }
            }

            // Unmark the worker as visited (backtrack)
            visitedRow[i] = 0;
        }
    }
}

// Function to initialize and call the Branch and Bound function
void solveAssignmentProblem(int costMatrix[N][N]) {
    int assigned[N]; // To store the assigned jobs
    int visitedRow[N] = {0}; // To mark visited rows (workers)
    int visitedCol[N] = {0}; // To mark visited columns (jobs)
    minCost = INT_MAX; // Initialize minCost with maximum integer value

    // Call the Branch and Bound function
    assignmentProblem(costMatrix, assigned, visitedRow, visitedCol, 0, 0);

    // Print the minimum cost
    printf("Minimum Cost: %d\n", minCost);
}

int main() {
    int costMatrix[N][N] = {
        {9, 2, 7, 8},
        {6, 4, 3, 7},
        {5, 8, 1, 8},
        {7, 6, 9, 4}
    };

    // Solve the Assignment Problem
    solveAssignmentProblem(costMatrix);

    return 0;
}
