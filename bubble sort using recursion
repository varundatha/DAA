#include <stdio.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to perform a single pass of bubble sort recursively
void bubblePass(int arr[], int n) {
    if (n == 1)
        return;

    // Traverse the array and swap adjacent elements if they are in the wrong order
    for (int i = 0; i < n - 1; i++) {
        if (arr[i] > arr[i + 1]) {
            swap(&arr[i], &arr[i + 1]);
        }
    }

    // Recursively call bubblePass with reduced array size
    bubblePass(arr, n - 1);
}

// Function to perform bubble sort recursively
void bubbleSort(int arr[], int n) {
    if (n <= 1)
        return;

    // Perform a single pass of bubble sort
    bubblePass(arr, n);

    // Recursively call bubbleSort with reduced array size
    bubbleSort(arr, n - 1);
}

int main() {
    int arr[] = {64, 25, 12, 22, 11};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Original array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    bubbleSort(arr, n);

    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
